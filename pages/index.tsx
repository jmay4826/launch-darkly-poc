import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useFlags, useLDClient } from "launchdarkly-react-client-sdk";
import styles from "../styles/Home.module.css";
import { useEffect, useRef, useState } from "react";
import useStateHistory from "../utils/useStateHistory";

const Home: NextPage = () => {
  const flags = useFlags();
  const client = useLDClient();
  const [userInfo, setUserInfo] = useState<any>(null);
  const [userIdentity, setUserIdentity] = useState<any>(null);
  const [clientIsReady, setClientIsReady] = useState(false);
  const flagIsUndefined = flags.ldPogEditor === undefined;
  const [, setClientError] = useState(false);
  const flagUndefinedHistory = useStateHistory(flagIsUndefined);
  const readyHistory = useStateHistory(clientIsReady);
  const flagHistory = useStateHistory(flags);

  // users can be re-identified
  // for example, upon login
  const identifyUser = async (key?: string, anonymous = false) => {
    await client?.identify({
      key,
      anonymous,
    });
    setUserIdentity(key);
  };

  useEffect(() => {
    async function waitForReady() {
      try {
        await client?.waitForInitialization();
        setClientIsReady(true);
      } catch (err) {
        console.error(err);
        setClientError(true);
      }
    }
    waitForReady();
  }, [client]);

  

  // the flag will be undefined if it's still loading.
  // we could potentially use that to identify a loading state,
  // but the flag may exist with a default value depending on our settings
  // in _app.tsx. If we need to be sure about the loading state,
  // we can use the client.waitForInitialization method above
  const loading = flagIsUndefined || !clientIsReady;

  // we can get the current user's info from the LD client,
  // which would be particularly helpful if they are anonymous.
  useEffect(() => {
    setUserInfo(client?.getUser());
  }, [client, userIdentity]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loading ? (
        "Loading"
      ) : (
        <main className={styles.main}>
          <h1 className={styles.title}>
            Welcome to
            {flags.ldPogEditor ? (
              "Launch Darkly"
            ) : (
              <a href="https://nextjs.org">Next.js!</a>
            )}
          </h1>
          <h2 style={{ color: flags.ldTestFlag }}>Current flag values</h2>
          <p>{JSON.stringify(flags)}</p>
          <h2>Flag value history</h2>
          {flagHistory.current.map((value) => (
            <ol key={value}>{JSON.stringify(value)}</ol>
          ))}
          <h2>Controls</h2>
          <button onClick={() => identifyUser("on")}>
            Identify as &quot;on&quot; User
          </button>
          <button onClick={() => identifyUser("off")}>
            Identify as &quot;off&quot; User
          </button>
          <button onClick={() => identifyUser(Math.random().toString())}>
            Identify as unknown User
          </button>
          <button onClick={() => identifyUser(undefined, true)}>
            Identify as anonymous with random, persistent key
          </button>

          <h3>Flag undefined history</h3>
          {JSON.stringify(flagUndefinedHistory)}
          <h3>Client ready history</h3>
          {JSON.stringify(readyHistory)}

          <h3>User info</h3>
          {JSON.stringify(userInfo)}
        </main>
      )}

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
